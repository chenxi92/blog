import{r as t,o,c as p,a as n,e,F as c,b as s,d as l}from"./app.01142347.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const u={},i=n("p",null,"Notes about Android thread.",-1),d=n("h2",{id:"terminology",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#terminology","aria-hidden":"true"},"#"),s(" Terminology")],-1),k={id:"thread",tabindex:"-1"},h=n("a",{class:"header-anchor",href:"#thread","aria-hidden":"true"},"#",-1),b=s(),m={href:"https://developer.android.com/reference/java/lang/Thread",target:"_blank",rel:"noopener noreferrer"},_=s("Thread"),f=n("blockquote",null,[n("p",null,[s("A "),n("code",null,"thread"),s(" is a thread of execution in a program. The Java Virtual Machine allows an application to have multiple threads running concurrently.")])],-1),g={id:"executor",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#executor","aria-hidden":"true"},"#",-1),w=s(),y={href:"https://developer.android.com/reference/java/util/concurrent/Executor",target:"_blank",rel:"noopener noreferrer"},x=s("Executor"),E=n("blockquote",null,[n("p",null,[s("An object that executes submitted "),n("code",null,"Runnable"),s(" tasks.")])],-1),M={id:"executorservice",tabindex:"-1"},j=n("a",{class:"header-anchor",href:"#executorservice","aria-hidden":"true"},"#",-1),T=s(),S={href:"https://developer.android.com/reference/java/util/concurrent/ExecutorService",target:"_blank",rel:"noopener noreferrer"},H=s("ExecutorService"),L=n("blockquote",null,[n("p",null,[s("An "),n("code",null,"Executor"),s(" that provides methods to manage termination and methods that can produce a "),n("code",null,"Future"),s(" for tracking progress of one or more asynchronous tasks.")]),n("p",null,[s("Implements "),n("code",null,"Executor"),s(" interface.")])],-1),q={id:"scheduledexecutorservice",tabindex:"-1"},I=n("a",{class:"header-anchor",href:"#scheduledexecutorservice","aria-hidden":"true"},"#",-1),U=s(),A={href:"https://developer.android.com/reference/java/util/concurrent/ScheduledExecutorService",target:"_blank",rel:"noopener noreferrer"},R=s("ScheduledExecutorService"),O=n("blockquote",null,[n("p",null,[s("An "),n("code",null,"ExecutorService"),s(" that can schedule commands to run after a given delay, or to execute periodically.")]),n("p",null,[s("Extends from "),n("code",null,"ExecutorService"),s(".")])],-1),C={id:"threadpoolexecutor",tabindex:"-1"},F=n("a",{class:"header-anchor",href:"#threadpoolexecutor","aria-hidden":"true"},"#",-1),Q=s(),D={href:"https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor",target:"_blank",rel:"noopener noreferrer"},B=s("ThreadPoolExecutor"),N=n("blockquote",null,[n("p",null,[s("An "),n("code",null,"ExecutorService"),s(" that executes each submitted task using one of possibly several pooled threads, normally configured using "),n("code",null,"Executors"),s(" factory methods.")]),n("p",null,[s("Extends from "),n("code",null,"ExecutorService"),s(".")])],-1),V={id:"threadfactory",tabindex:"-1"},P=n("a",{class:"header-anchor",href:"#threadfactory","aria-hidden":"true"},"#",-1),J=s(),z={href:"https://developer.android.com/reference/java/util/concurrent/ThreadFactory",target:"_blank",rel:"noopener noreferrer"},G=s("ThreadFactory"),K=n("blockquote",null,[n("p",null,"An object that creates new threads on demand.")],-1),W={id:"executors",tabindex:"-1"},X=n("a",{class:"header-anchor",href:"#executors","aria-hidden":"true"},"#",-1),Y=s(),Z={href:"https://developer.android.com/reference/java/util/concurrent/Executors",target:"_blank",rel:"noopener noreferrer"},$=s("Executors"),nn=n("blockquote",null,[n("p",null,[s("Factory and utilty methods for "),n("code",null,"Executor"),s(", "),n("code",null,"ExecutorService"),s(", "),n("code",null,"ScheduledExecutorService"),s(", "),n("code",null,"ThreadFactory"),s(" and "),n("code",null,"Callable"),s(" classes.")])],-1),sn={id:"handler",tabindex:"-1"},an=n("a",{class:"header-anchor",href:"#handler","aria-hidden":"true"},"#",-1),en=s(),tn={href:"https://developer.android.com/reference/android/os/Handler",target:"_blank",rel:"noopener noreferrer"},on=s("Handler"),pn=n("blockquote",null,[n("p",null,[s("A Handler allows you to send and process "),n("code",null,"Message"),s(" and "),n("code",null,"Runnable"),s(" objects associated with a thread's "),n("code",null,"MessageQueue"),s(". There are two main uses for a Handler:")]),n("ol",null,[n("li",null,"to schedule messages and runnables to be executed at some point in the future"),n("li",null,"to enqueue an action to be performed on a different thread than your own.")])],-1),cn=n("thead",null,[n("tr",null,[n("th",null,"Concept"),n("th",null,"Definition"),n("th",null,"Usage")])],-1),ln=n("tr",null,[n("td",null,"UI Thread (Main Thread)"),n("td",null,"A thread usually to operate UI."),n("td",null,"Handle UI release events")],-1),rn={href:"https://developer.android.com/reference/android/os/Message",target:"_blank",rel:"noopener noreferrer"},un=s("Message"),dn=n("td",null,[s("Defines a message containing a description and arbitrary data object that can be sent to a "),n("code",null,"Handler")],-1),kn=n("td",null,"Data structure need to be transferred.",-1),hn={href:"https://developer.android.com/reference/android/os/MessageQueue",target:"_blank",rel:"noopener noreferrer"},bn=s("MessageQueue"),mn=n("td",null,"Low-Level class holding the list of messages to be dispatched by a Looper.",-1),_n=n("td",null,[s("Save the "),n("code",null,"Message"),s(" send by "),n("code",null,"Handler")],-1),fn={href:"https://developer.android.com/reference/android/os/Handler",target:"_blank",rel:"noopener noreferrer"},gn=s("Handler"),vn=n("td",null,[s("A Handler allows you to send and process "),n("code",null,"Message"),s(" and "),n("code",null,"Runnable"),s(" objects associated with a thread's "),n("code",null,"MessageQueue"),s(".")],-1),wn=n("td",null,[s("1. Add "),n("code",null,"Message"),s(" to the "),n("code",null,"MessageQueue"),s(),n("br"),s(" 2. Loop the dispatched "),n("code",null,"Message")],-1),yn={href:"https://developer.android.com/reference/android/os/Looper",target:"_blank",rel:"noopener noreferrer"},xn=s("Looper"),En=n("td",null,"Class used to run a message loop for a thread",-1),Mn=n("td",null,"Loop message",-1),jn=l(`<ul><li>Every thread only have one Looper;</li><li>One looper can bind to multiple thread;</li></ul><h2 id="code-examples" tabindex="-1"><a class="header-anchor" href="#code-examples" aria-hidden="true">#</a> Code Examples</h2><h3 id="_1-how-to-submit-a-task-on-ui-thread" tabindex="-1"><a class="header-anchor" href="#_1-how-to-submit-a-task-on-ui-thread" aria-hidden="true">#</a> 1. How to submit a task on UI thread?</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runOnUIThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_2-how-to-submit-a-task-on-other-thread" tabindex="-1"><a class="header-anchor" href="#_2-how-to-submit-a-task-on-other-thread" aria-hidden="true">#</a> 2. How to submit a task on other thread?</h3><h4 id="_2-1-create-a-new-thread-and-submit-a-runnable-task" tabindex="-1"><a class="header-anchor" href="#_2-1-create-a-new-thread-and-submit-a-runnable-task" aria-hidden="true">#</a> 2.1 Create a new thread and submit a runnable task</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submitTaskAsync</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_2-2-creat-a-single-thread-executor-and-submit-a-runnable-task-sequentially" tabindex="-1"><a class="header-anchor" href="#_2-2-creat-a-single-thread-executor-and-submit-a-runnable-task-sequentially" aria-hidden="true">#</a> 2.2 Creat a single thread executor and submit a runnable task sequentially</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> serialQueue <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submitTaskAsync</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>serialQueue<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_3-how-to-communicate-from-work-thread-to-ui-thread" tabindex="-1"><a class="header-anchor" href="#_3-how-to-communicate-from-work-thread-to-ui-thread" aria-hidden="true">#</a> 3. How to communicate from work thread to UI thread?</h3><h4 id="_3-1-send-message-from-work-thread-to-ui-thread-by-handler-sendmessage" tabindex="-1"><a class="header-anchor" href="#_3-1-send-message-from-work-thread-to-ui-thread-by-handler-sendmessage" aria-hidden="true">#</a> 3.1 Send message from work thread to UI thread by <code>Handler.sendMessage()</code></h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. define handler</span>
    <span class="token keyword">private</span> <span class="token class-name">Handler</span> mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 4. operate message at UI thread</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> 
                    <span class="token comment">// do something</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fetchDadaAndUpdateOnUIThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Start a new thread</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Mock do something for a long time ...</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              
                <span class="token comment">// 2. Create Message </span>
                <span class="token class-name">Bundle</span> bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                bundle<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                
                <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                msg<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
                msg<span class="token punctuation">.</span>what <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                
                <span class="token comment">// 3. Send Message</span>
                mHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h4 id="_3-2-send-message-from-work-thread-to-ui-thread-by-handler-post" tabindex="-1"><a class="header-anchor" href="#_3-2-send-message-from-work-thread-to-ui-thread-by-handler-post" aria-hidden="true">#</a> 3.2 Send message from work thread to UI thread by <code>Handler.post()</code></h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">notifyOnUIThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// do some work on UI thread</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,14);function Tn(Sn,Hn){const a=t("ExternalLinkIcon");return o(),p(c,null,[i,d,n("h3",k,[h,b,n("a",m,[_,e(a)])]),f,n("h3",g,[v,w,n("a",y,[x,e(a)])]),E,n("h3",M,[j,T,n("a",S,[H,e(a)])]),L,n("h3",q,[I,U,n("a",A,[R,e(a)])]),O,n("h3",C,[F,Q,n("a",D,[B,e(a)])]),N,n("h3",V,[P,J,n("a",z,[G,e(a)])]),K,n("h3",W,[X,Y,n("a",Z,[$,e(a)])]),nn,n("h3",sn,[an,en,n("a",tn,[on,e(a)])]),pn,n("table",null,[cn,n("tbody",null,[ln,n("tr",null,[n("td",null,[n("a",rn,[un,e(a)])]),dn,kn]),n("tr",null,[n("td",null,[n("a",hn,[bn,e(a)])]),mn,_n]),n("tr",null,[n("td",null,[n("a",fn,[gn,e(a)])]),vn,wn]),n("tr",null,[n("td",null,[n("a",yn,[xn,e(a)])]),En,Mn])])]),jn],64)}var In=r(u,[["render",Tn]]);export{In as default};
