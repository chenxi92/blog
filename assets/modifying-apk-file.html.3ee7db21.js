import{r as l,o as i,c as t,a as e,e as n,F as r,d as o,b as a}from"./app.01142347.js";import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";const d={},c=o('<h1 id="modifying-and-apk-file" tabindex="-1"><a class="header-anchor" href="#modifying-and-apk-file" aria-hidden="true">#</a> Modifying and APK File</h1><p>Decompile, modify, recompile and re-sign an APK file.</p><h2 id="problem" tabindex="-1"><a class="header-anchor" href="#problem" aria-hidden="true">#</a> Problem</h2><p>I have an <code>.apk</code> file and I wish to view/edit the following contents:</p><ul><li>Resources such as <code>strings.xml</code> or other drawables</li><li>App configurations such as <code>AndroidManifest.xml</code></li><li>Other SDK configurations</li><li>Source code such as Java classes</li></ul><h2 id="environment" tabindex="-1"><a class="header-anchor" href="#environment" aria-hidden="true">#</a> Environment</h2><ul><li>MacOS</li><li>Android Studio Electric Eel</li><li>Java 11</li></ul><h2 id="prerequisties" tabindex="-1"><a class="header-anchor" href="#prerequisties" aria-hidden="true">#</a> Prerequisties</h2><p>Download the following tools:</p>',9),u={href:"https://apktool.org/",target:"_blank",rel:"noopener noreferrer"},h=a("apktool"),b=a(" -- A tool for reverse engineering Android apk files."),m={href:"https://java-decompiler.github.io/",target:"_blank",rel:"noopener noreferrer"},k=a("JD-JUI"),g=a(" -- Java Decompiler."),f={href:"https://github.com/pxb1988/dex2jar",target:"_blank",rel:"noopener noreferrer"},v=a("dex2jar"),_=a(" -- Converts Android dex files to class/jar files."),x=o(`<h2 id="solution" tabindex="-1"><a class="header-anchor" href="#solution" aria-hidden="true">#</a> Solution</h2><h3 id="step-1-decompile-apk-file" tabindex="-1"><a class="header-anchor" href="#step-1-decompile-apk-file" aria-hidden="true">#</a> Step 1: Decompile apk file</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ apktool d -f -o <span class="token operator">&lt;</span>apk-decompile-folder<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>apk-file<span class="token operator">&gt;</span>
<span class="token comment"># -s: keep classes.dex, default will convert dex file to smali code</span>
<span class="token comment"># -f: force rewrite</span>
<span class="token comment"># -o: output path</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="how-to-view-the-source-code" tabindex="-1"><a class="header-anchor" href="#how-to-view-the-source-code" aria-hidden="true">#</a> How to view the source code?</h4><ul><li><p>Add the <code>-s</code> option to keep the <code>classes.dex</code> code.</p></li><li><p>Convert <code>dex</code> file to <code>jar</code> file.</p></li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># convert dex to jar</span>
$ d2j-dex2jar.sh <span class="token operator">&lt;</span>dex-file<span class="token operator">&gt;</span> -o <span class="token operator">&lt;</span>jar-file<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>Open the JD-JUI and drag the converted jar file to JD-JUI to view the source code</li></ul><h4 id="how-to-edit-the-source-code" tabindex="-1"><a class="header-anchor" href="#how-to-edit-the-source-code" aria-hidden="true">#</a> How to edit the source code?</h4><ul><li><p>The easiest way is to replace the <code>smali</code> code.</p><ul><li>Create a Java class with the same name you want to replace</li><li>Build the Java class into a <code>smali</code> code (Create a hello world project, integrate the java class, then build it into an apk)</li><li>Replace it in the apk decompiled folder</li></ul></li><li><p>If you are familiar with <code>smali</code> grammar, you can edit the <code>smali</code> code directly.</p></li></ul><h3 id="step-2-recompile-apk-file" tabindex="-1"><a class="header-anchor" href="#step-2-recompile-apk-file" aria-hidden="true">#</a> Step 2: Recompile apk file</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ apktool b -f <span class="token operator">&lt;</span>apk-decompile-folder<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>The recompiled apk file will be located at: <code>&lt;apk-decompile-folder&gt;/dist/</code></p><h3 id="step3-sign-apk-file" tabindex="-1"><a class="header-anchor" href="#step3-sign-apk-file" aria-hidden="true">#</a> Step3: Sign apk file</h3><p>I&#39;m using the debug keystore file generate by Android Studio to sign the apk file (you can use you own keystore file)</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">key_store_path</span><span class="token operator">=</span><span class="token string">&quot;<span class="token environment constant">$HOME</span>/.android/debug.keystore&quot;</span>
<span class="token assign-left variable">key_store_alias</span><span class="token operator">=</span><span class="token string">&quot;androiddebugkey&quot;</span>
<span class="token assign-left variable">key_store_password</span><span class="token operator">=</span><span class="token string">&quot;android&quot;</span>

<span class="token assign-left variable">build_tools</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">\${<span class="token environment constant">HOME</span>}</span>/Library/Android/sdk/build-tools&quot;</span>
<span class="token assign-left variable">apksigner</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> -d $<span class="token punctuation">{</span>build_tools<span class="token punctuation">}</span>/* <span class="token operator">|</span> <span class="token function">tail</span> -n <span class="token number">1</span><span class="token variable">)</span></span>/apksigner&quot;</span>
	
<span class="token variable">$apksigner</span> sign<span class="token punctuation">\\</span>
--ks <span class="token variable">\${key_store_path}</span> <span class="token punctuation">\\</span>
--ks-key-alias <span class="token variable">\${key_store_alias}</span> <span class="token punctuation">\\</span>
--ks-pass pass:<span class="token variable">\${key_store_password}</span><span class="token punctuation">\\</span>
--in  <span class="token variable">\${apk_source_path}</span> <span class="token punctuation">\\</span>
--out <span class="token variable">\${apk_output_path}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><code>apksigner</code> is located in <code>~/Library/Android/sdk/build-tools/&lt;version-number&gt;/</code>, if you have multiple versions of the build tool, simply use the latest one.</p>`,16),y=a("For more usage about "),w=e("code",null,"apksigner",-1),j=a(" see "),A={href:"https://developer.android.com/tools/apksigner",target:"_blank",rel:"noopener noreferrer"},q=a("apksigner"),$=a("."),I=o(`<h3 id="step-4-verify-apk-file" tabindex="-1"><a class="header-anchor" href="#step-4-verify-apk-file" aria-hidden="true">#</a> Step 4: Verify apk file</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token variable">$apksigner</span> verify <span class="token operator">&lt;</span>apk-file<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references" aria-hidden="true">#</a> References</h2>`,3),J={href:"https://ntcho.github.io/software/decompiling-apk/",target:"_blank",rel:"noopener noreferrer"},S=a("Modfying an APK File"),D={href:"https://medium.com/@_sathishshan/decompile-and-recompile-android-apk-7d375e1bca83",target:"_blank",rel:"noopener noreferrer"},T=a("Decompile and Recompile Android APK"),F=o(`<h2 id="faqs" tabindex="-1"><a class="header-anchor" href="#faqs" aria-hidden="true">#</a> FAQs</h2><ol><li>To install <code>apktool</code></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ brew <span class="token function">install</span> apktool
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>To install <code>dex2jar</code></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ brew <span class="token function">install</span> dex2jar
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>If opening <code>jd-jui</code> results in the following error:</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Performing Streamed Install
adb: failed to <span class="token function">install</span> xxx.apk: Failure <span class="token punctuation">[</span>-124: Failed parse during installPackageLI: Targeting R+ <span class="token punctuation">(</span>version <span class="token number">30</span> and above<span class="token punctuation">)</span> requires the resources.arsc of installed APKs to be stored uncompressed and aligned on a <span class="token number">4</span>-byte boundary<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Try the following solution:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ java -jar /Applications/JD-GUI.app/Contents/Resources/Java/jd-gui-1.6.6-min.jar
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,9),P={start:"4"},E=a("Another way to view the java source code is to install "),R={href:"https://github.com/skylot/jadx",target:"_blank",rel:"noopener noreferrer"},C=a("jadx"),K=o(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ brew <span class="token function">install</span> jadx
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Then open it:</p><blockquote><p>jadx-gui</p></blockquote><ol start="5"><li>To unzip <code>.jar</code> file</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>jar xf file_name.jar
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="6"><li>To zip to <code>.jar</code> file</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>jar cf file_name.jar source_folder/
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,7);function M(L,O){const s=l("ExternalLinkIcon");return i(),t(r,null,[c,e("ul",null,[e("li",null,[e("a",u,[h,n(s)]),b]),e("li",null,[e("a",m,[k,n(s)]),g]),e("li",null,[e("a",f,[v,n(s)]),_])]),x,e("p",null,[y,w,j,e("a",A,[q,n(s)]),$]),I,e("ul",null,[e("li",null,[e("a",J,[S,n(s)])]),e("li",null,[e("a",D,[T,n(s)])])]),F,e("ol",P,[e("li",null,[E,e("a",R,[C,n(s)])])]),K],64)}var H=p(d,[["render",M]]);export{H as default};
