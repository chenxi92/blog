import{r as t,o as p,c as o,a as n,e as a,F as c,d as l,b as e}from"./app.01142347.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";const r={},u=l(`<h1 id="swift-concurrency" tabindex="-1"><a class="header-anchor" href="#swift-concurrency" aria-hidden="true">#</a> Swift Concurrency</h1><p>Records some concepts about Swift concurrency and some usage code.</p><h2 id="async-await" tabindex="-1"><a class="header-anchor" href="#async-await" aria-hidden="true">#</a> <code>async/await</code></h2><p><code>async/await</code> enables us to manage long-running, asynchronous operations that are executed in the background.</p><h3 id="_1-how-to-define-a-async-function" tabindex="-1"><a class="header-anchor" href="#_1-how-to-define-a-async-function" aria-hidden="true">#</a> 1. How to define a <code>async</code> function?</h3><p>Define a function with <code>async</code> keyword:</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">Data</span><span class="token operator">?</span> <span class="token punctuation">{</span>
     <span class="token comment">// perform data request ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>If the asynchronous operation does not throw any error, you can define the function without <code>throws</code> keyword, like the following:</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>
     <span class="token comment">// perform data request ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-how-to-call-a-async-function" tabindex="-1"><a class="header-anchor" href="#_2-how-to-call-a-async-function" aria-hidden="true">#</a> 2. How to call a <code>async</code> function?</h3><p>Call a <code>async</code> function which may throw error:</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token class-name">Task</span> <span class="token punctuation">{</span>
  <span class="token keyword">do</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Fetched </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">data</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Fetching data failed with error </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">error</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>Note: A <code>Task</code> provide a asynchronous context to call <code>async</code> function.</p></blockquote><p>Call a <code>asyc</code> function which will not throw any error:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Task {
  let data = try await fetchData()
  print(&quot;Fetched \\(data).&quot;)
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3-how-to-convert-a-closure-based-methods-to-async-await-format" tabindex="-1"><a class="header-anchor" href="#_3-how-to-convert-a-closure-based-methods-to-async-await-format" aria-hidden="true">#</a> 3. How to convert a closure-based methods to <code>async/await</code> format?</h3><p>Leverage with continuation to generate <code>async/await</code> function, <code>Swift</code> provide four continuations:</p><ul><li><code>withCheckedThrowingContinuation</code></li><li><code>withCheckedContinuation</code></li><li><code>withUnsafeThrowingContinuation</code></li><li><code>withUnsafeContinuation</code></li></ul><p>Assume you have function with closure-based handler like the following :</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">fetchData</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> completion<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token class-name">Data</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// perform async request ...</span>
    <span class="token function">completion</span><span class="token punctuation">(</span><span class="token nil constant">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>First we can use <code>withCheckedContinuation</code> method:</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">Data</span><span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> withCheckedContinuation <span class="token punctuation">{</span> continuation <span class="token keyword">in</span>
        fetchData <span class="token punctuation">{</span> data <span class="token keyword">in</span>
            continuation<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>returning<span class="token punctuation">:</span> data<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Throwing methods can use the <code>withCheckedThrowingContinuation</code> method.</p><p>Second we can use <code>withUnsafeContinuation</code> method:</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">-&gt;</span> <span class="token class-name">Data</span><span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> withUnsafeContinuation <span class="token punctuation">{</span> continuation <span class="token keyword">in</span>
        fetchData <span class="token punctuation">{</span> data <span class="token keyword">in</span>
            continuation<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>returning<span class="token punctuation">:</span> data<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Throwing method can use the <code>withUnsafeThrowingContinuation</code> method.</p><p>Keep in mind about continuation:</p><ul><li>Only call the continuation&#39;s <code>resume</code> once. No more, no less.</li><li>Throwing closure must use <code>withCheckedThrowingContinuation</code> or <code>withUnsafeThrowingContinuation</code>.</li></ul><p>What is the difference between <code>withCheckedContinuation</code> and <code>withUnsafeContinuation</code> ?</p><ul><li><p>They work in the exact same way.</p></li><li><p><code>withUnsafeContinuation</code> does not check any potential errors, which means mistake will not be caught early.</p></li><li><p><code>withCheckedContinuation</code> check some potential errors.</p></li></ul><h2 id="task" tabindex="-1"><a class="header-anchor" href="#task" aria-hidden="true">#</a> <code>Task</code></h2><p>A <code>Task</code> represent a unit of asynchronous work, and give us access to a concurrent context in which we can cal <code>async</code> marked APIs to perform various operations in the background.</p><p>A sample task like the following:</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span> imageTask <span class="token operator">=</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UIImage</span><span class="token operator">?</span> <span class="token keyword">in</span>
    <span class="token keyword">let</span> imageURL <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://example/random&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span>

    <span class="token comment">// Check for cancellation before the network request.</span>
    <span class="token keyword">try</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">checkCancellation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">let</span> <span class="token punctuation">(</span>imageData<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> imageURL<span class="token punctuation">)</span>

    <span class="token comment">// Check for cancellation after the network request</span>
    <span class="token comment">// to prevent starting our heavy image operations.</span>
    <span class="token keyword">try</span> <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token function">checkCancellation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">let</span> image <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> imageData<span class="token punctuation">)</span>

    <span class="token comment">// Perform image operations since the task is not cancelled.</span>
    <span class="token keyword">return</span> image
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="actor" tabindex="-1"><a class="header-anchor" href="#actor" aria-hidden="true">#</a> <code>actor</code></h2><p>Since Swift 5.5 a new type declaration keyword has been added that is <code>actor</code>.</p><p>Actors in Swift protect their state from data races, and using them allows the compiler to give us helpful feedback while writing applications.</p><p>It prevent data races by creating synchronized access to its isolated data. Before Actors, we would create the same result using all kinds of locks.</p><h3 id="declare-a-actor-type" tabindex="-1"><a class="header-anchor" href="#declare-a-actor-type" aria-hidden="true">#</a> Declare a <code>actor</code> type</h3><p>Here is an example to declare a <code>actor</code> type:</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">actor</span> <span class="token class-name">Room</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> roomNumber <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;101&quot;</span></span>
    <span class="token keyword">var</span> visitorCount<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span>
        visitorCount <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> visitorCount
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="access-data-in-actor-type" tabindex="-1"><a class="header-anchor" href="#access-data-in-actor-type" aria-hidden="true">#</a> Access data in <code>actor</code> type</h3><p>To access data in <code>actor</code> type, you need in the <code>async/awit</code> context, below is an example:</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> room <span class="token operator">=</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> visitCount <span class="token operator">=</span> <span class="token keyword">await</span> room<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span>visitCount<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> room<span class="token punctuation">.</span>visitorCount<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="define-your-own-actor" tabindex="-1"><a class="header-anchor" href="#define-your-own-actor" aria-hidden="true">#</a> Define your own actor</h3><p>Below is an example to define your own actor:</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token attribute atrule">@globalActor</span> <span class="token keyword">actor</span> <span class="token class-name">MyActor</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">let</span> shared <span class="token operator">=</span> <span class="token class-name">MyActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">private</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    
    <span class="token keyword">var</span> value<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span>
    
    <span class="token keyword">func</span> <span class="token function-definition function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token attribute atrule">@MyActor</span> <span class="token keyword">func</span> <span class="token function-definition function">bar</span><span class="token punctuation">(</span><span class="token keyword">actor</span><span class="token punctuation">:</span> <span class="token class-name">MyActor</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token keyword">actor</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token class-name">MyActor</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token class-name">Task</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> myActor <span class="token operator">=</span> <span class="token class-name">MyActor</span><span class="token punctuation">.</span>shared
    <span class="token keyword">await</span> myActor<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">await</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token keyword">actor</span><span class="token punctuation">:</span> myActor<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="mainactor" tabindex="-1"><a class="header-anchor" href="#mainactor" aria-hidden="true">#</a> <code>@MainActor</code></h2><p>A MainActor is a globally unique actor who performs tasks on the main thread.</p><p><code>@MainActor</code> can be used in class , properties and functions.</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token attribute atrule">@MainActor</span>
<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MyViewModel</span> <span class="token punctuation">{</span>
  
<span class="token punctuation">}</span>

<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MyViewModel</span> <span class="token punctuation">{</span>
    <span class="token attribute atrule">@MainActor</span> <span class="token keyword">var</span> images<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">UIImage</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  
    <span class="token attribute atrule">@MainActor</span> <span class="token keyword">func</span> <span class="token function-definition function">fetchImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">Task</span> <span class="token punctuation">{</span>
          <span class="token keyword">do</span> <span class="token keyword">let</span> images <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token function">loadImages</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          images <span class="token operator">=</span> images
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
          images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>Use MainActor directly</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token class-name">Task</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token class-name">MainActor</span><span class="token punctuation">.</span>run <span class="token punctuation">{</span>
       <span class="token comment">/// do some operation on main thread</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,54),k={href:"https://www.swiftbysundell.com/discover/concurrency/",target:"_blank",rel:"noopener noreferrer"},d=e("Swift by Sundell"),b={href:"https://www.avanderlee.com/category/swift/",target:"_blank",rel:"noopener noreferrer"},m=e("SwiftLee");function w(h,f){const s=t("ExternalLinkIcon");return p(),o(c,null,[u,n("p",null,[n("a",k,[d,a(s)])]),n("p",null,[n("a",b,[m,a(s)])])],64)}var v=i(r,[["render",w]]);export{v as default};
