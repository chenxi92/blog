import{r as e,o as p,c as o,a as n,e as t,F as c,b as s,d as l}from"./app.01142347.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const i={},r=n("h1",{id:"dynamiccallable",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dynamiccallable","aria-hidden":"true"},"#"),s(" dynamicCallable")],-1),k=n("code",null,"@dynamicCallable",-1),m=s(" is a new feature of Swift 5 and introduced at "),d={href:"https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md",target:"_blank",rel:"noopener noreferrer"},b=s("SE-0216"),h=s(". It serves the purpose: to make it easier for Swift code to work alongside dynamic languages such as Python and Javascript."),f=n("h2",{id:"what-is-dynamiccallable",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#what-is-dynamiccallable","aria-hidden":"true"},"#"),s(" What is @dynamicCallable ?")],-1),y=s("The definition of "),g={href:"https://docs.swift.org/swift-book/ReferenceManual/Attributes.html",target:"_blank",rel:"noopener noreferrer"},w=s("attribute"),_=s(" about "),q=n("code",null,"@dynamicCallable",-1),x=s(" are as follows:"),C=l(`<blockquote><p><code>@dynamicCallable</code> is a attributes which can apply to a class, structure, enumeration or protocol to treat instances of the types as callable function.</p><p>The type must implement either a <code>dynamicallyCall(withArguments:)</code> method or a <code>dynamicallyCall(withKeywordArguments:)</code> method, or both.</p></blockquote><p>We can call an instance of a dynamically callable types as if it&#39;s a function that takes any number of arguments.</p><h2 id="code-with-explanation" tabindex="-1"><a class="header-anchor" href="#code-with-explanation" aria-hidden="true">#</a> Code with explanation</h2><p>We can use any anything that conforms to <code>ExpressibleByArrayLiteral</code> such as arrays sets to the method <code>dynamicallyCall(withArguments:)</code></p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token attribute atrule">@dynamicCallable</span>
<span class="token keyword">struct</span> <span class="token class-name">TelephoneExchange</span> <span class="token punctuation">{</span>
    <span class="token keyword">func</span> <span class="token function-definition function">dynamicallyCall</span><span class="token punctuation">(</span>withArguments phoneNumber<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> phoneNumber <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Get Swift help on forums.swift.org&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Unrecognized number&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> dial <span class="token operator">=</span> <span class="token class-name">TelephoneExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// Use a dynamic method call</span>
<span class="token function">dial</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// Output: Get Swift help on forums.swift.org</span>
<span class="token function">dial</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// Output: Unrecognized number</span>

<span class="token comment">// Call the underlying method directly.</span>
dial<span class="token punctuation">.</span><span class="token function">dynamicallyCall</span><span class="token punctuation">(</span>withArguments<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// Output: Get Swift help on forums.swift.org</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>We can use any anything that conforms to <code>ExpressibleByDictionaryLiteral</code> such as dictionary, key value pairs to the method <code>dynamicallyCall(withKeywordArguments:)</code></p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token attribute atrule">@dynamicCallable</span>
<span class="token keyword">struct</span> <span class="token class-name">Repeater</span> <span class="token punctuation">{</span>
    <span class="token keyword">func</span> <span class="token function-definition function">dynamicallyCall</span><span class="token punctuation">(</span>withKeywordArguments pairs<span class="token punctuation">:</span> <span class="token class-name">KeyValuePairs</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Int</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pairs<span class="token punctuation">.</span>map <span class="token punctuation">{</span> label<span class="token punctuation">,</span> count <span class="token keyword">in</span>
            <span class="token function">repeatElement</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span> count<span class="token punctuation">:</span> count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">joined</span><span class="token punctuation">(</span>separator<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot; &quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token function">joined</span><span class="token punctuation">(</span>separator<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;\\n&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> repeatLabels <span class="token operator">=</span> <span class="token class-name">Repeater</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">repeatLabels</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> d<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> e<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>repeatLabels<span class="token punctuation">.</span><span class="token function">dynamicallyCall</span><span class="token punctuation">(</span>withKeywordArguments<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;c&quot;</span></span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;d&quot;</span></span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;e&quot;</span></span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="limitations" tabindex="-1"><a class="header-anchor" href="#limitations" aria-hidden="true">#</a> Limitations</h2><p>The attribute must be placed on the primary definition of a type, not on an <strong>exension</strong> .</p>`,9);function v(A,E){const a=e("ExternalLinkIcon");return p(),o(c,null,[r,n("p",null,[k,m,n("a",d,[b,t(a)]),h]),f,n("p",null,[y,n("a",g,[w,t(a)]),_,q,x]),C],64)}var N=u(i,[["render",v]]);export{N as default};
